The ``101-lazy_matrix_mul`` module
======================

Using ``lazy_matrix_mul``
-------------------


``lazy_matrix_mul(...)`` returns a new matrix representing the multiplication
of ``m_a`` by ``m_b``.

    case 1:
    return, ok.
    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = m_a
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[ 7 10]
     [15 22]]


    case 2:
    return, ok.
    >>> m_a = [[1, 2]]
    >>> m_b = [
    ... [3, 4],
    ... [5, 6]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[13 16]]


    case 3:
    return, ok.
    >>> m_a = [
    ... [1.2, 5.5, 6.2],
    ... [4.66, 12.3, -9.2]
    ... ]
    >>> m_b = [
    ... [5.0, 3.3],
    ... [-2.9, 4.4],
    ... [7.2, 4.4]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[ 34.69   55.44 ]
     [-78.61   29.018]]


    case 4:
    return, ok.
    >>> print(lazy_matrix_mul(m_a))
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'


    case 5:
    return, ok.
    >>> print(lazy_matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 2 required positional arguments:
    'm_a' and 'm_b'

    case 6:
    return, ok.
    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [2, 3],
    ... [4, 5]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)


    case 7:
    return, ok.
    >>> print(lazy_matrix_mul([[]], [[5, 6], [7, 8]]))
    Traceback (most recent call last):
    ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

    case 8:
    return, ok.
    >>> print(lazy_matrix_mul([[5, 6], [7, 8]], [[]]))
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)


    case 9:
    return, ok.
    >>> print(lazy_matrix_mul("not a list", [[1, 2]]))
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead


    case 10:
    return, ok.
    >>> print(lazy_matrix_mul([[1, 2]], "also not a list"))
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

    case 11:
    return, ok.
    >>> print(lazy_matrix_mul("not a list", "also not a list"))
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead


    case 12:
    return, ok.
    >>> print(lazy_matrix_mul(None, None))
    Traceback (most recent call last):
    TypeError: Object arrays are not currently supported



    case 13:
    return, ok.
    >>> print(lazy_matrix_mul([1, 2], [[3, 4]]))
    Traceback (most recent call last):
    ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)


    case 14:
    return, ok.
    >>> print(lazy_matrix_mul([[1, 2]], [3, 4]))
    [11]


    case 15:
    return, ok.
    >>> print(lazy_matrix_mul([1, 2], [3, 4]))
    11


    case 16:
    return, ok.
    >>> print(lazy_matrix_mul([[1, "non-number"]], [[3, 4]]))
    Traceback (most recent call last):
    ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)


    case 17:
    return, ok.
    >>> print(lazy_matrix_mul([[5, 6], [7, 8]], [[5, "6"], [7, 8]]))
    Traceback (most recent call last):
    TypeError: invalid data type for einsum


    case 18:
    return, ok.
    >>> print(lazy_matrix_mul([[1, "non-number"]], [[{"a": 1}, 8.8]]))
    Traceback (most recent call last):
    TypeError: Object arrays are not currently supported


    case 19:
    return, ok.
    >>> m_a = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.


    case 20:
    return, ok.
    >>> m_a = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.


    case 21:
    return, ok.
    >>> m_a = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = m_a
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.
